package com.jaden.sort;

/*
 * 插入排序
 * 思想：原数组第一个元素可以认为是已经排好序的新数组，第二个元素与新数组的元素（第一个元素）进行比较，如果比第一个元素小，那么放到该元素前面，如果比第一个元素大，那么不用改变位置，加入到新数组后面。新数组是从小到大排序好的数组，元素个数为2
 *     然后第三个元素同新数组的元素分别比较，假如第三个元素是最小的，插入到最前，假如第三个元素是第二小的，插入到新数组的中间，假如最大，那么直接放到新数组的后面，新数组元素个数为3
 *     依次遍历整个老数组，将值插入到合适的位置，遍历完成，数组就排序完成。。
 *     虽然用新的数组理解起来方便，但是实际上是没有新的数组的，是用索引值去区分的，index以前，是有序，后面是无序
 *     插入排序涉及到数组的整体后移，比如说，前面5个是有序，但是第6个值大小正好比第3个大，比第4个小，那么将第6个插入到第4个的时候，原先的4要到第5，原先的5要到第6位，注意处理这个逻辑就好
 * 时间复杂度：O(n²)
 * 空间复杂度：O(1)
 */
public class InsertionSort implements Sort {

	@Override
	public int[] sort(int[] src) {
		int size = src.length;
		int tmp;
		int p; //指针插入位置
		for(int i=0; i<size-1; i++) {
			tmp = src[i+1];
			p = i;
			while (p >=0 && tmp < src[p]) {
				src[p+1] = src[p];
				p--;
			}
			src[p+1] = tmp;
			
		}
		return src;
	}

}
